#-------------------------------------------------------------
# Shell Prompt
#-------------------------------------------------------------
DEBUG=false
# log level 1. INFO; 2. WARN; 3. ALERT
LOG_LEVEL=2

# [MACHINE COLOUR CODE][CNX][SU][LOAD][TIME USER@HOST PWD] >
# 
# MACHINE COLOUR CODE: Colours set in .bashrc
#   TRUNKS
#   UUB
#   GOKU
#
# CNX:
#
#
# SU:
#
#
# LOAD:
#
# TIME:
#    Green     == machine load is low
#    Orange    == machine load is medium
#    Red       == machine load is high
#    ALERT     == machine load is very high
# USER:
#    Cyan      == normal user
#    Orange    == SU to user
#    Red       == root
# HOST:
#    Cyan      == local session
#    Green     == secured remote connection (via ssh)
#    Red       == unsecured remote connection
# PWD:
#    Green     == more than 10% free disk space
#    Orange    == less than 10% free disk space
#    ALERT     == less than 5% free disk space
#    Red       == current user does not have write privileges
#    Cyan      == current filesystem is size zero (like /proc)
# >:
#    White     == no background or suspended jobs in this shell
#    Cyan      == at least one background job in this shell
#    Orange    == at least one suspended job in this shell
#
#    Command is added to the history file each time you hit enter,
#    so it's available to all shells (using 'history -a').

# Test connection type:
if [ -n "${SSH_CONNECTION}" ]; then
    CNX_MSG="SSH"        # Connected to remote machine via ssh
    CNX_LOG_LEVEL=2      # WARN
    CNX=${YL_FLAG}
elif [[ "${DISPLAY%%:0*}" != "" ]]; then
    CNX_MSG="!!!"        # Connected on remote machine not via ssh
    CNX_LOG_LEVEL=3      # ALERT
    CNX=${ALERT}
else
    CNX_MSG="LOCAL"      # Connected on local machine.
    CNX_LOG_LEVEL=1      # INFO
    CNX=${GR_FLAG}
fi

# Test user type:
if [[ ${USER} == "root" ]]; then
    SU_MSG="ROOT"         # User is root.
    SU_LOG_LEVEL=3           # ALERT
    SU=${ALERT}
elif [[ ${USER} != $(logname) ]]; then
    SU_MSG="${USER}"      # User is not login user
    SU_LOG_LEVEL=2           # WARN
    SU=${RD_FLAG}
else
    SU_MSG="${USER}"      # User is login user
    SU_LOG_LEVEL=1           # INFO
    SU=${GR_FLAG}
fi

# Load calculations
NCPU=$(grep -c 'processor' /proc/cpuinfo)    # Number of CPUs
SLOAD=$(( 100*${NCPU} ))        # Small load
MLOAD=$(( 200*${NCPU} ))        # Medium load
XLOAD=$(( 400*${NCPU} ))        # Xlarge load

# Returns system load as percentage, i.e., '40' rather than '0.40)'.
function load()
{
    local SYSLOAD=$(cut -d " " -f1 /proc/loadavg | tr -d '.')
    # System load of the current host.
    echo $((10#$SYSLOAD))       # Convert to decimal.
}

# Sets $LOAD_LOG_LEVEL according to system load.
function load_log_level()
{
    local SYSLOAD=$(load)
    if [ ${SYSLOAD} -gt ${XLOAD} ]; then
        LOAD_LOG_LEVEL=3           # ALERT
        LOAD=${ALERT}
    elif [ ${SYSLOAD} -gt ${MLOAD} ]; then
        LOAD_LOG_LEVEL=2           # WARN
        LOAD=${RD_FLAG}
    else
        LOAD_LOG_LEVEL=1           # INFO
        LOAD=${GR_FLAG}
    fi
}

load_log_level
LOAD_MSG="$(load)%"

# Returns a color according to free disk space in $PWD.
#function disk_color()
#{
    #if [ ! -w "${PWD}" ] ; then
        #echo -en ${RD_FLAG}
        # No 'write' privilege in the current directory.
    #elif [ -s "${PWD}" ] ; then
        #local used=$(command df -P "$PWD" |
                   #awk 'END {print $5} {sub(/%/,"")}')
        #if [ ${used} -gt 95 ]; then
            #echo -en ${ALERT}           # Disk almost full (>95%).
        #elif [ ${used} -gt 90 ]; then
            #echo -en ${OR_FLAG}            # Free disk space almost gone.
        #else
            #echo -en ${GR_FLAG}           # Free disk space is ok.
        #fi
    #else
        #echo -en ${Cyan}
        # Current directory is size '0' (like /proc, /sys etc).
    #fi
#}

# Now we construct the prompt.
#PROMPT_COMMAND="history -a"
case ${TERM} in
  *term | *term* | rxvt | linux)
       ## PS1="\[\$(load_color)\][\A\[${NC}\] "
        # Time of day (with load info):
        #PS1="[\[\$(load_color)\]\A\[${NC}\] "
        # User@Host (with connection type info):
        #PS1=${PS1}"\[${SU}\]\u\[${NC}\]@\[${CNX}\]\h\[${NC}\] "
        # PWD (with 'disk space' info):
        #PS1=${PS1}"\[\$(disk_color)\]\W\[${NC}\]] "
        # Prompt (with 'job' info):
        #PS1=${PS1}"\[\$(job_color)\]>\[${NC}\] "
        # Set title of current xterm:
        #PS1=${PS1}"\[\e]0;[\u@\h] \w\a\]"
        ;;
    *)
        #PS1="(\A \u@\h \W) > " # --> PS1="(\A \u@\h \w) > "
                               # --> Shows full pathname of current dir.
        ;;
esac

# Prompt development
#PS1="\[${Purple}\]$(date +"%H:%M")\[${NC}\]\n"
#PS1=${PS1}"\[${CNX}\] Cx \[${NC}\]"
#PS1=${PS1}"\[${SU}\] U \[${NC}\]"
#PS1=${PS1}"\[\$(load_color)\] L \[${NC}\]"
#PS1=${PS1}"\[\$(disk_color)\] D \[${NC}\]"
#PS1=${PS1}"\[${HOST_MACHINE}\] \A \u@\h \[${NC}\] \w\n> "

if [ "$DEBUG" = true ]; then
    echo "\$LOG_LEVEL: $LOG_LEVEL"
    echo
    echo "\$CNX_MSG: $CNX_MSG"
    echo "\$CNX_LOG_LEVEL: $CNX_LOG_LEVEL"
    echo "\$CNX: $CNX"
    echo
    echo "\$SU_MSG: $CNX_MSG"
    echo "\$SU_LOG_LEVEL: $CNX_LOG_LEVEL"
    echo "\$SU: $SU"
    echo
    echo "\$LOAD_MSG: ${LOAD_MSG}"
    echo "\$LOAD_LOG_LEVEL: ${LOAD_LOG_LEVEL}"
    echo "\$LOAD: ${LOAD}"
fi

# Prompt
PROMPT_COMMAND="history -a"
# Add machine colour code
PS1="\[${ON_HOST_MACHINE}\]  \[${NC}\]"
# Add connection info
if [ $CNX_LOG_LEVEL -ge $LOG_LEVEL ]; then
    PS1=${PS1}"\[${CNX}\] ${CNX_MSG} \[${NC}\]"
fi
# Add user info
if [ $SU_LOG_LEVEL -ge $LOG_LEVEL ]; then
    PS1=${PS1}"\[${SU}\] ${SU_MSG^^} \[${NC}\]"
fi
# Add current processor load
if [ $LOAD_LOG_LEVEL -ge $LOG_LEVEL ]; then
    PS1=${PS1}"\[${LOAD}\] ${LOAD_MSG} \[${NC}\]"
fi
# Add time
PS1=${PS1}"\[${HOST_MACHINE}\] \A\[${NC}\]"
# Add user@host
PS1=${PS1}"\[${HOST_MACHINE}\] \u@\h\[${NC}\]"
# Add pwd 
PS1=${PS1}"\[${White}${On_Black}\] \w \[${NC}\] \n> "
